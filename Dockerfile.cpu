### Frontend build ###
FROM node:lts-bookworm-slim AS frontend-build
WORKDIR /app
COPY frontend/package.json frontend/package-lock.json ./
RUN npm install
COPY frontend/ ./
RUN npm run build
##########################################################################

### Backend build ###
FROM python:3.11-slim-bookworm AS backend-build
SHELL ["sh", "-exc"]
RUN apt-get update -qy && \
    apt-get install -qyy \
        -o APT::Install-Recommends=false \
        -o APT::Install-Suggests=false \
        git \
        clang \
        ca-certificates

COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

# - Silence uv complaining about not being able to use hard links,
# - tell uv to byte-compile packages for faster application startups,
# - prevent uv from accidentally downloading isolated Python builds,
# - pick a Python,
# - and finally declare `/app` as the target for `uv sync`.
ENV UV_LINK_MODE=copy \
    UV_COMPILE_BYTECODE=1 \
    UV_PYTHON_DOWNLOADS=never \
    UV_PYTHON=python3.11 \
    UV_PROJECT_ENVIRONMENT=/app/.venv

# - Use clang as the default C compiler
# - Use clang++ as the default C++ compiler
ENV CC=clang \
    CXX=clang++

# Synchronize DEPENDENCIES without the application itself.
# This layer is cached until uv.lock or pyproject.toml change, which are
# only temporarily mounted into the build container since we don't need
# them in the production one.
RUN uv venv --seed
RUN --mount=type=cache,target=/root/.cache \
    --mount=type=bind,source=server/uv.lock,target=uv.lock \
    --mount=type=bind,source=server/pyproject.toml,target=pyproject.toml \
    uv sync \
        --extra cpu \
        --locked \
        --no-dev \
        --no-install-project \
        --no-install-package detectron2 \
        --no-install-package struct-eqtable

# Install the problematic source packages separately
RUN --mount=type=cache,target=/root/.cache \
    --mount=type=bind,source=server/uv.lock,target=uv.lock \
    --mount=type=bind,source=server/pyproject.toml,target=pyproject.toml \
    uv sync \
        --extra cpu \
        --locked \
        --no-dev \
        --no-install-project
##########################################################################

### Final container ###
FROM python:3.11-slim-bookworm
SHELL ["sh", "-exc"]

# Add the application virtualenv to search path.
ENV PATH=/app/.venv/bin:$PATH

ENTRYPOINT ["/docker-entrypoint.sh"]
STOPSIGNAL SIGINT

# Note how the runtime dependencies differ from build-time ones.
# Notably, there is no uv either!
RUN apt-get update -qy && apt-get install -qyy \
    -o APT::Install-Recommends=false \
    -o APT::Install-Suggests=false \
    libpcre3 \
    libxml2 \
    libgl1 \
    libglib2.0-0 \
    libgomp1 \
    nginx \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY docker-entrypoint.sh /
RUN chmod +x /docker-entrypoint.sh

# Copy the pre-built `/app` directory to the runtime container
# and change the ownership to user app and group app in one step.
COPY --from=backend-build /app /app

WORKDIR /app

# Copy files needed to run the backend
COPY server/models/ models/

COPY server/configs/ configs/
COPY server/src/ src/
COPY server/app.py .

# Copy files needed to run nginx & supervisord (including frontend)
COPY supervisord.conf /
COPY --from=frontend-build /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx

# nginx reverse proxy runs on port 8000
EXPOSE 8000

CMD ["supervisord", "-c", "/supervisord.conf"]