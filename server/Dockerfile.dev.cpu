# syntax=docker/dockerfile:1
# Reference: https://hynek.me/articles/docker-uv/
FROM python:3.11-slim-bookworm AS build
SHELL ["sh", "-exc"]

### Start build prep.
### This should be a separate build container for better reuse.
RUN apt-get update -qy && \
    apt-get install -qyy \
        -o APT::Install-Recommends=false \
        -o APT::Install-Suggests=false \
        git \
        clang \
        ca-certificates

COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

# - Silence uv complaining about not being able to use hard links,
# - tell uv to byte-compile packages for faster application startups,
# - prevent uv from accidentally downloading isolated Python builds,
# - pick a Python,
# - and finally declare `/app` as the target for `uv sync`.
ENV UV_LINK_MODE=copy \
    UV_COMPILE_BYTECODE=1 \
    UV_PYTHON_DOWNLOADS=never \
    UV_PYTHON=python3.11 \
    UV_PROJECT_ENVIRONMENT=/app/.venv

# - Use clang as the default C compiler
# - Use clang++ as the default C++ compiler
ENV CC=clang \
    CXX=clang++

### End build prep -- this is where your app Dockerfile should start.

# Synchronize DEPENDENCIES without the application itself.
# This layer is cached until uv.lock or pyproject.toml change, which are
# only temporarily mounted into the build container since we don't need
# them in the production one.
RUN uv venv --seed
RUN --mount=type=cache,target=/root/.cache \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync \
        --extra cpu \
        --locked \
        --no-dev \
        --no-install-project \
        --no-install-package detectron2 \
        --no-install-package struct-eqtable

# Install the problematic source packages separately
RUN --mount=type=cache,target=/root/.cache \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync \
        --extra cpu \
        --locked \
        --no-dev \
        --no-install-project

##########################################################################

FROM python:3.11-slim-bookworm
SHELL ["sh", "-exc"]

# Optional: add the application virtualenv to search path.
ENV PATH=/app/.venv/bin:$PATH

# Don't run your app as root.
RUN groupadd -r app && useradd -r -d /app -g app -N app

# See <https://hynek.me/articles/docker-signals/>.
STOPSIGNAL SIGINT

# Note how the runtime dependencies differ from build-time ones.
# Notably, there is no uv either!
RUN apt-get update -qy && apt-get install -qyy \
    -o APT::Install-Recommends=false \
    -o APT::Install-Suggests=false \
    libpcre3 \
    libxml2 \
    libgl1 \
    libglib2.0-0 \
    libgomp1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy the pre-built `/app` directory to the runtime container
# and change the ownership to user app and group app in one step.
COPY --from=build --chown=app:app /app /app

USER app
WORKDIR /app

# Copy files needed to run the Python application
COPY models/ models/
COPY configs/ configs/
COPY src/ src/
COPY app.py .

COPY supervisord.dev.conf .

CMD ["supervisord", "-c", "supervisord.dev.conf"]